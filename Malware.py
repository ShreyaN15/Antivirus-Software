# malware.py

import hashlib
import os
import tkinter as tk
from tkinter import filedialog, messagebox
import tkinter.font as tkFont

# Define a set of known malicious file hashes (replace these with actual hashes)
malicious_hashes = {
    'malicious_file1.exe': {
        'md5': 'd41d8cd98f00b204e9800998ecf8427e',
        'sha256': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
    },
    'malicious_file2.txt': {
        'md5': 'd41d8cd98f00b204e9800998ecf8427e',
        'sha256': '3a7d6e9c12250d1779b2df5aa2c5a3ae6d67c31b4e5bc702a63c365e31feb4f5'
    },
    'malicious_file3.txt': {
        'md5': '0273897b11be35ac2e7104c172de0206',
        'sha1': '387452dfea3c7b354c35d23507d8793ff56bdda1',
        'sha256': 'd9df56bbe447eae41f3fc81b02e2de21a75de4cd4b02be4eebe08e9e553f19bc'
    },
    'network': {
        "MD5": "6E2F8616A01725DCB37BED0A2495AEB2",
        "SHA-1": "00000903319A8CE18A03DFA22C07C6CA43602061"
    },
    'wow64_microsoft-windows-i..timezones.resources_31bf3856ad364e35_10.0.16299.579_de-de_f24979c73226184d.manifest': {
        "MD5": "8ED4B4ED952526D89899E723F3488DE4",
        "SHA-1": "00000079FD7AAC9B2F9C988C50750E1F50B27EB5"
    },
    '.text._ZNSt14overflow_errorC1ERKSs': {
        "MD5": "344428FA4BA313712E4CA9B16D089AC4",
        "SHA-1": "0000001FFEF4BE312BAB534ECA7AEAA3E4684D85"
    },
    '.rela.dyn': {
        "MD5": "131312A96CAD4ACAA7E2631A34A0D47C",
        "SHA-1": "FFFFFDAC1B1B4C513896C805C2C698D9688BE69F"
    },
    's_copypix.c': {
        "MD5": "559D049F44942683093A91BA19D0AF54",
        "SHA-1": "FFFFFF4DB8282D002893A9BAF00E9E9D4BA45E65"
    },
    '358.git2-msvstfs.dll': {
        "MD5": "9E4C165089CBA3653484C3F23F1CBC67",
        "SHA-1": "FFFFFE4C92E3F7282C7502F1734B243FA52326FB"
    }
}
class MalwareScanner:
    def __init__(self):
        self.root = tk.Tk()
        self.app = self.App(self.root)

    class App:
        def __init__(self, root):
            # setting title
            root.title("Malware Scanner")
            # setting window size
            width = 600
            height = 500
            screenwidth = root.winfo_screenwidth()
            screenheight = root.winfo_screenheight()
            alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
            root.geometry(alignstr)
            root.resizable(width=False, height=False)

            GLabel_850 = tk.Label(root)
            ft = tkFont.Font(family='Times', size=38)
            GLabel_850["font"] = ft
            GLabel_850["fg"] = "#333333"
            GLabel_850["justify"] = "center"
            GLabel_850["text"] = "Choose the area to Scan:"
            GLabel_850.place(x=40, y=90, width=536, height=93)

            GRadio_25 = tk.Radiobutton(root)
            GRadio_25["bg"] = "#5fb878"
            GRadio_25["disabledforeground"] = "#ffffff"
            ft = tkFont.Font(family='Times', size=23)
            GRadio_25["font"] = ft
            GRadio_25["fg"] = "#333333"
            GRadio_25["justify"] = "left"
            GRadio_25["text"] = "Scan a Directory"
            GRadio_25.place(x=140, y=190, width=337, height=60)
            GRadio_25["command"] = self.scan_directory

            GRadio_781 = tk.Radiobutton(root)
            GRadio_781["bg"] = "#5fb878"
            ft = tkFont.Font(family='Times', size=23)
            GRadio_781["font"] = ft
            GRadio_781["fg"] = "#333333"
            GRadio_781["justify"] = "left"
            GRadio_781["text"] = "Scan a File"
            GRadio_781.place(x=140, y=270, width=336, height=56)
            GRadio_781["command"] = self.scan_file

            GButton_365 = tk.Button(root)
            GButton_365["bg"] = "#000000"
            ft = tkFont.Font(family='Times', size=18)
            GButton_365["font"] = ft
            GButton_365["fg"] = "#ffffff"
            GButton_365["justify"] = "center"
            GButton_365["text"] = "Go Back"
            GButton_365.place(x=190, y=350, width=229, height=48)
            GButton_365["command"] = root.destroy

        def show_alert(self, title, message):
            messagebox.showerror(title, message)

        def show_info(self, title, message):
            messagebox.showinfo(title, message)

        def compute_hash(self, file_path, hash_algorithm='md5'):
            hash_function = hashlib.new(hash_algorithm)
            with open(file_path, 'rb') as file:
                for byte_block in iter(lambda: file.read(4096), b''):
                    hash_function.update(byte_block)
            return hash_function.hexdigest()

        def scan_file_for_malware(self, file_path):
            file_name = os.path.basename(file_path)
            if file_name in malicious_hashes:
                file_hashes = malicious_hashes[file_name]
                for hash_algorithm in file_hashes:
                    expected_hash = file_hashes[hash_algorithm]
                    actual_hash = self.compute_hash(file_path, hash_algorithm)
                    if actual_hash == expected_hash:
                        self.show_alert("Malware Found", f"{file_path} is infected with {hash_algorithm} hash!")
                        return
            self.show_info("System is Safe", f"{file_path} is not infected.")

        def scan_directory_for_malware(self, directory_path):
            for root, dirs, files in os.walk(directory_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    self.scan_file_for_malware(file_path)

        def choose_directory(self):
            directory_path = filedialog.askdirectory()
            if directory_path:
                self.scan_directory_for_malware(directory_path)

        def choose_file(self):
            file_path = filedialog.askopenfilename()
            if file_path:
                self.scan_file_for_malware(file_path)

        def scan_directory(self):
            self.choose_directory()

        def scan_file(self):
            self.choose_file()

    def scan(self):
        self.root.mainloop()

if __name__ == "__main__":
    scanner = MalwareScanner()
    scanner.scan()
